(def! not (fn* (b)
  (if b false true)))

(def! load-file (fn* (f)
  (eval
    (read-string
      (str
        "(do " (slurp f) "\nnil)")))))

; <=, >= to be implemented

(def! swap! (fn* [a, f]
  (reset! a (f (deref a)))))

(defmacro! cond
  (fn* (& xs)
    (if (> (count xs) 0)
     (list 'if (first xs)
       (if (> (count xs) 1)
         (nth xs 1)
         (throw "odd number of forms to cond"))
       (cons 'cond (rest (rest xs)))))))
